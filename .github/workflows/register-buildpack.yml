name: Register Buildpack

on:
  issues:
    types: [opened]

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      buildpack: ${{ steps.detect_validate.outputs.buildpack }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Node Dependencies
        working-directory: scripts/validate
        shell: bash
        run: |
          npm install
      - id: detect_validate
        name: Validate Buildpack Registry Issue
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            const path = require('path')
            const scripts = require(path.resolve('./scripts/validate/index.js'))
            const result = scripts.validateIssue({context})

            console.log(`::set-output name=buildpack::${JSON.stringify(result)}`)
  authenticate:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/github-script@v2
        name: Retrieve Owners
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        with:
          github-token: ${{ secrets.BUILDPACK_REGISTRY_GITHUB_ACTION_TOKEN }}
          script: |
            const buildpackInfo = ${{ needs.validate.outputs.buildpack }}
            let registryOwners = ''
            try {
              const {data} = await github.repos.getContents({
                owner: 'elbandito',
                path: `v1/${buildpackInfo.ns}.json`,
                repo: 'buildpack-namespaces'
              })
              const buff = new Buffer.from(data.content, 'base64')
              registryOwners = buff.toString('utf-8')

            } catch (error) {
              if (error.status && error.status === 404) {
                console.error('Creating file since it does not exist')
                const content = {
                  owners: [
                    {
                      id: context.payload.sender.id,
                      type: 'github_user'
                    }
                  ]
                };
                const buff = Buffer.from(JSON.stringify(content), 'utf-8');
                registryOwners = buff.toString('utf-8')

                await github.repos.createOrUpdateFile({
                  owner: 'elbandito',
                  repo: 'buildpack-namespaces',
                  path: `v1/${buildpackInfo.ns}.json`,
                  message: 'initial commit',
                  content: buff.toString('base64'),
                  committer: {
                    name: 'elbandito',
                    email: 'longoria.public@gmail.com'
                  },
                  author: {
                    name: 'elbandito',
                    email: 'longoria.public@gmail.com'
                  }
                })
              } else {
                console.error(error)
                process.exit(1)
              }
            }
            console.log(`::set-env name=REGISTRY_OWNERS::${registryOwners.replace(/\r?\n|\r/g, " ")}`)

      - uses: actions/github-script@v2
        name: Authenticate
        with:
          github-token: ${{ secrets.BUILDPACK_REGISTRY_GITHUB_ACTION_TOKEN }}
          script: |
            const owners = JSON.parse(process.env.REGISTRY_OWNERS).owners
            if (!!owners.find(owner => (owner.id === context.payload.sender.id) && (owner.type === 'github_user'))) {
              console.error('user successfully authenticated via github_user')
              process.exit(0)
            }

            let orgIDs = [];
            try {
              const orgs = await github.orgs.listForUser({
                username: context.payload.sender.login
              });
              orgIDs = orgs.data.map(org => org.id);

            } catch (error) {
              console.error(error);
              process.exit(1);
            }

            const filteredOwners = owners.filter(owner => (owner.type === 'github_org' && orgIDs.includes(owner.id)));
            if (filteredOwners.length > 0) {
              console.error('user successfully authenticated via github_org')
              process.exit(0)
            }

            console.error('user is NOT authorized to register buildpack')
            process.exit(1)

  index:
    runs-on: ubuntu-latest
    needs:
      - validate
      - authenticate
    steps:
      - uses: actions/github-script@v2
        name: Update Registry Index
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        with:
          github-token: ${{ secrets.BUILDPACK_REGISTRY_GITHUB_ACTION_TOKEN }}
          script: |
            const Path = require('path');
            const buildpackInfo = ${{ needs.validate.outputs.buildpack }}
            const nameLength = buildpackInfo.name.length

            const toBase64 = (value) => {
              const buff = Buffer.from(value, 'utf-8');
              return buff.toString('base64');
            }

            const createOrUpdateFileContents = async (path, message, content, sha = '') => {
              let params = {
                owner: 'elbandito',
                repo: 'buildpack-registry',
                path,
                message,
                content,
                committer: {
                    name: 'elbandito',
                    email: 'longoria.public@gmail.com'
                },
                author: {
                    name: 'elbandito',
                    email: 'longoria.public@gmail.com'
                }
              }
              if (sha !== '') {
                  params = {...params, ...{sha}};
              }
              try {
                await github.repos.createOrUpdateFile(params)
              } catch (error) {
                console.error(error)
                process.exit(1)
              }
            }

            if (nameLength === 1) {
                indexPath = Path.join("1")
            } else if (nameLength === 2) {
                indexPath = Path.join("2")
            } else if (nameLength === 3) {
                indexPath = Path.join("3", buildpackInfo.name.slice(0, 2))
            } else if (nameLength > 3) {
                indexPath = Path.join(buildpackInfo.name.slice(0, 2), buildpackInfo.name.slice(2, 4))
            } else {
                console.error(`buildpack name cannot be empty`)
                process.exit(1)
            }

            indexPath = Path.join(indexPath, `${buildpackInfo.ns}_${buildpackInfo.name}`)
            try {
              const {data} = await github.repos.getContents({
                owner: 'elbandito',
                path: indexPath,
                repo: 'buildpack-registry'
              })

              let buff = new Buffer.from(data.content, 'base64')
              let fileContent = buff.toString('utf-8').trimEnd()
              fileContent = fileContent + "\n" + JSON.stringify(buildpackInfo)

              await createOrUpdateFileContents(indexPath, context.payload.issue.title, toBase64(fileContent), data.sha)

              } catch (error) {
                if (error.status && error.status === 404) {
                  await createOrUpdateFileContents(indexPath, context.payload.issue.title, toBase64(JSON.stringify(buildpackInfo)))
                } else {
                  console.error(error)
                  process.exit(1)
                }
              }

      - uses: actions/github-script@v2
        name: Close Issue
        with:
          github-token: ${{ secrets.BUILDPACK_REGISTRY_GITHUB_ACTION_TOKEN }}
          scripts: |
            await github.issues.update({
              owner: context.payload.issues.owner,
              repo: 'buildpack-registry,
              issue_number: context.payload.issues.issue_number,
              state: 'closed'
            })
